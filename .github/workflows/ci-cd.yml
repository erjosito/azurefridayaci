name: Azure Friday CI CD

on: [push]
  # pull_request:
  #   branches:
  #     - main

env:
  # basic  
  resourceGroup: itsfriday21
  location: eastus
  subName: "ca-jessde-demo-test"

  # app specific
  aci_name: sslaci
  acr_name: itsfriday21

  # db var
  sql_server_name: sqlserver$RANDOM
  sql_db_name: acisqldb

  #network variables
  vnet_name: acivnet
  vnet_prefix: 192.168.0.0/16
  vm_subnet_name: vm
  vm_subnet_prefix: 192.168.1.0/24
  aci_subnet_name: aci
  aci_subnet_prefix: 192.168.2.0/24
  sql_subnet_name: sql
  sql_subnet_prefix: 192.168.3.0/24

jobs:
  deployInfra:
    name: Setup Environment
    runs-on: ubuntu-latest
    steps:
    # checkout branch
    - name: git checkout main branch
      uses: actions/checkout@v2

    # log into Azure
    - name: "Login via Azure CLI"
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # create resourceGroup
    # create resource group and VM
    - name: "Create Resource Group and VM"
      run: |
        az group create --subscription "$subName" --name $resourceGroup --location $location > /dev/null && echo "Resource Group Created."

        az vm create -n test-vm -g $resourceGroup -l $location --image ubuntuLTS --generate-ssh-keys \
        --public-ip-address test-vm-pip --vnet-name $vnet_name \
        --vnet-address-prefix $vnet_prefix --subnet $vm_subnet_name --subnet-address-prefix $vm_subnet_prefix
        

        vm_pip=$(az network public-ip show -n test-vm-pip -g $resourceGroup --query ipAddress -o tsv) && echo "VM Public IP has been created. Your PIP is: $vm_pip"

        # persist to future steps
        echo "::set-env name=vm_pip::$$(az network public-ip show -n test-vm-pip -g $resourceGroup --query ipAddress -o tsv)"

    # Create Database
    - name: "Create Database and set firewall rules"
      run: |
        az sql server create -n $sql_server_name -g $resourceGroup -l $location --admin-user ${{ SECRETS.SQL_USER }} --admin-password ${{ SECRETS.SQL_PASSWORD }}

        sql_server_fqdn=$(az sql server show -n $sql_server_name -g $resourceGroup -o tsv --query fullyQualifiedDomainName)
        echo "::set-env name=sql_server_fqdn::$$(az sql server show -n $sql_server_name -g $resourceGroup -o tsv --query fullyQualifiedDomainName)"

        az sql db create \
          -n $sql_db_name \
          -s $sql_server_name \
          -g $resourceGroup -e Basic \
          -c 5 --no-wait

        aci_pip=$(ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $vm_pip "curl -s http://$aci_ip:8080/api/ip" | jq -r .my_public_ip) && echo $aci_pip

        az sql server firewall-rule create \
        -g $resourceGroup \
        -s $sql_server_name \
        -n public_sqlapi_aci-source \
        --start-ip-address $aci_pip \
        --end-ip-address $aci_pip

        ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $vm_pip "curl -s http://$aci_ip:8080/api/sqlversion"

        ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $vm_pip "curl -s http://$aci_ip:8080/api/sqlsrcip"
    
    # create azure container registry
    - name: "Create Azure Container Registry"
      run: |
        az acr create \
          --resource-group $resourceGroup \
          --name $acrName \
          --sku Basic \
          --subscription "$subName" \
          --admin-enabled true

    # Create ACI
    - name: "Create Azure Container Instance for SQL API"
      run: |
        az network vnet subnet create -g $resourceGroup --vnet-name $vnet_name -n $aci_subnet_name --address-prefix $aci_subnet_prefix

        vnet_id=$(az network vnet show -n $vnet_name -g $resourceGroup --query id -o tsv)

        aci_subnet_id=$(az network vnet subnet show -n $aci_subnet_name --vnet-name $vnet_name -g $resourceGroup --query id -o tsv)

        // may move
        az container create -n $aci_name -g $resourceGroup -e "SQL_SERVER_USERNAME=${{ SECRETS.SQL_USER }}" \
        "SQL_SERVER_PASSWORD=${{ SECRETS.SQL_PASSWORD }}" \
        "SQL_SERVER_FQDN=${sql_server_fqdn}" \
        --image erjosito/sqlapi:1.0 \
        --ip-address private --ports 8080 --vnet $vnet_id --subnet $aci_subnet_id

  build:
    runs-on: ubuntu-latest
    needs: deployInfra
    steps:
    # checkout branch
    - name: git checkout main branch
      uses: actions/checkout@v2

    # log into Azure
    - name: "Login via Azure CLI"
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: "Get ACR Container Information"
      run: |
        echo "Retrieving Container Registry info..."
        acrName=$(az acr list -g $resourceGroup -o tsv --query [0].name)
        CONTAINER_REGISTRY=$(az acr list -g $resourceGroup -o tsv --query [0].loginServer)
        # acr/container registry variables
        echo "::set-env name=CONTAINER_REGISTRY::$(az acr list -g $resourceGroup -o tsv --query [0].loginServer)"
        echo "::set-env name=REGISTRY_USERNAME::$(az acr credential show -n $acrName --query username -o tsv)"
        echo "::set-env name=REGISTRY_PASSWORD::$(az acr credential show -n $acrName -o tsv --query passwords[0].value)"
    
    - name: "docker login"
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.CONTAINER_REGISTRY }}
        username: ${{ env.REGISTRY_USERNAME }}
        password: ${{ env.REGISTRY_PASSWORD }}

    - name: "build"
      run: docker build -t $CONTAINER_REGISTRY/sqlapi:$GITHUB_SHA .

    - uses: azure/container-scan@v0
      with:
        image-name: $CONTAINER_REGISTRY/sqlapi:$GITHUB_SHA
    
    - name: "push"
      run: docker push $CONTAINER_REGISTRY/sqlapi:$GITHUB_SHA

  # Possibly setup release in ADO with gates and approvals
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: "Get ACR and App Insights Information"
        run: |
          echo "Retrieving Container Registry info..."
          acrName=$(az acr list -g $resourceGroup -o tsv --query [0].name)
          CONTAINER_REGISTRY=$(az acr list -g $resourceGroup -o tsv --query [0].loginServer)
          # acr/container registry variables
          echo "::set-env name=CONTAINER_REGISTRY::$(az acr list -g $resourceGroup -o tsv --query [0].loginServer)"
          echo "::set-env name=REGISTRY_USERNAME::$(az acr credential show -n $acrName --query username -o tsv)"
          echo "::set-env name=REGISTRY_PASSWORD::$(az acr credential show -n $acrName -o tsv --query passwords[0].value)"

          echo "Retrieving Application Insights info..."
          instrumentationKey=$(az monitor app-insights component show --app $webappName --resource-group $resourceGroup --query instrumentationKey -o tsv)

      - name: "Deploy to Azure Container Instances"
        uses: "azure/aci-deploy@v1"
        with:
          resource-group: $resourceGroup
          dns-name-label: $aci_dns
          image: $CONTAINER_REGISTRY/sqlapi
          registry-username: ${{ env.REGISTRY_USERNAME }}
          registry-password: ${{ env.REGISTRY_PASSWORD }}
          name: $aci_name
          location: $location

      # - name: "Deploy SQL ACI"
      #   run: |
      #     az container create -g $resourceGroup -f iac/dev.yaml
